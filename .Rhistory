0/0
precision <- function(truth, prediction){
diff <- prediction - truth
return((diff/truth)*100)
}
precision <- function(truth, prediction){
if (truth == 0 and prediction==0){
return(0)
}
if (truth == 0){return (100)}
diff <- prediction - truth
return((diff/truth)*100)
}
precision <- function(truth, prediction){
if (truth == 0) and (prediction==0){
return(0)
}
if (truth == 0){return (100)}
diff <- prediction - truth
return((diff/truth)*100)
}
precision <- function(truth, prediction){
if (truth == 0) and (prediction==0)
return(0)
if (truth == 0)return(100)
diff <- prediction - truth
return((diff/truth)*100)
}
mapply(precision, data_pub_sat$saturday, data_pub_sat$tree_sat)
TRUE and FALSE
TRUE && FALSE
precision <- function(truth, prediction){
if (truth == 0) && (prediction==0)
return(0)
if (truth == 0)return(100)
diff <- prediction - truth
return((diff/truth)*100)
}
precision <- function(truth, prediction){
if (truth == 0 && prediction==0)
return(0)
if (truth == 0) return(100)
diff <- prediction - truth
return((diff/truth)*100)
}
mapply(precision, data_pub_sat$saturday, data_pub_sat$tree_sat)
data_pub_sat["tree"] <- mapply(precision, data_pub_sat$saturday, data_pub_sat$tree_sat)
data_pub_sat["linear"] <- mapply(precision, data_pub_sat$saturday, data_pub_sat$lin_sat)
data_pub_sat["light_gbm"] <- mapply(precision, data_pub_sat$saturday, data_pub_sat$lgbm_sat)
data_pub_sat["xg_boost"] <- mapply(precision, data_pub_sat$saturday, data_pub_sat$xg_sat)
saturday_scatter <- melt(data_pub_sat[c("saturday", "linear", "tree", "light_gbm", "xg_boost"),], id.vars = "saturday")
saturday_scatter
g_scat_sat <- ggplot(data_pub_sat, aes(x=data_pub_sat$saturday))
+ geom_point(data_pub_sat$linear, color="red")
g_scat_sat <- ggplot(data_pub_sat, aes(x=data_pub_sat$saturday))
+ geom_point(aes(y=data_pub_sat$linear), color="red")
g_scat_sat <- ggplot(data_pub_sat, aes(x=data_pub_sat$saturday))
+ geom_point(aes(y=data_pub_sat$linear))
g_scat_sat <- ggplot(data_pub_sat, aes(x=data_pub_sat$saturday))
+ geom_point(aes(y=data_pub_sat$linear))
g_scat_sat <- ggplot(data_pub_sat, aes(x=data_pub_sat$saturday))
g_scat_sat <- g_scat_sat  + geom_point(aes(y=data_pub_sat$linear))
g_scat_sat
data_pub_sat$linear
View(data_pub_sat)
View(data_pub_sat)
g_scat_sat <- ggplot(data=data_pub_sat) + ylim(-210, 210)
g_scat_sat <- geom_point(aes(x=saturday, y=linear, fill="red"))
g_scat_sat
g_scat_sat <- geom_point(aes(x=data_pub_sat$saturday, y=data_pub_sat$linear, fill="red"))
g_scat_sat
g_scat_sat <- ggplot(data=data_pub_sat) + ylim(-210, 210)
g_scat_sat <- geom_point(aes(x=data_pub_sat$saturday, y=data_pub_sat$linear, fill="red"))
g_scat_sat
g_scat_sat <- ggplot(data=data_pub_sat) + ylim(-210, 210)
g_scat_sat
g_scat_sat <- g_scat_sat + geom_point(aes(x=data_pub_sat$saturday, y=data_pub_sat$linear, fill="red"))
g_scat_sat
g_scat_sat <- ggplot(data=data_pub_sat) + ylim(-210, 210)
g_scat_sat <- g_scat_sat + geom_point(aes(x=data_pub_sat$saturday, y=data_pub_sat$linear, color="red"))
g_scat_sat
scatter_saturday <- melt(data_pub_sat[c("publisher", "linear", "tree", "light_gbm", "xg_boost"),], id.vars = "publisher")
scatter_saturday
scatter_saturday <- melt(data_pub_sat[c("publisher", "linear", "tree", "light_gbm", "xg_boost")], id.vars = "publisher")
scatter_saturday
saturday_data <- join(scatter_saturday, data_pub_sat[c("publisher", "saturday")], by="publisher")
saturday_data <- merge(scatter_saturday, data_pub_sat[c("publisher", "saturday")], by="publisher")
saturday_data
g_scat_sat <- ggplot(data=saturday_data) + ylim(-210, 210)
g_scat_sat <- g_scat_sat + geom_point(aes(x=saturday_data$saturday, y=saturday_data$value, fill=saturday_data$variable))
g_scat_sat
g_scat_sat <- ggplot(data=saturday_data) + ylim(-210, 210)
g_scat_sat <- g_scat_sat + geom_point(aes(x=saturday_data$saturday, y=saturday_data$value, color=saturday_data$variable))
g_scat_sat
g_scat_sat <- ggplot(data=data_pub_sat) + ylim(-210, 210)
g_scat_sat <- g_scat_sat + geom_point(aes(x=saturday_data$saturday, y=saturday_data$value, color=saturday_data$variable)) + labs(title="Saturday results", y="Deviation in percent", x="Billable Views")
g_scat_sat
g_scat_sat <- ggplot(data=data_pub_sat) + ylim(-210, 210)
g_scat_sat <- g_scat_sat + geom_point(aes(x=saturday_data$saturday, y=saturday_data$value, color=saturday_data$variable))
g_scat_sat
g_scat_sat <- ggplot(data=saturday_data) + ylim(-210, 210)
g_scat_sat <- g_scat_sat + geom_point(aes(x=saturday_data$saturday, y=saturday_data$value, color=saturday_data$variable))
g_scat_sat
g_scat_sat <- ggplot(data=saturday_data) + ylim(-210, 210)
g_scat_sat <- g_scat_sat + geom_point(aes(x=saturday_data$saturday, y=saturday_data$value, color=saturday_data$variable)) + labs(title="Saturday results", y="Deviation in percent", x="Billable Views") + scale_fill_discrete(name="Model type")
g_scat_sat
data_pub_sun <- data_pub[c("publisher", "saturday", "lin_sat", "tree_sat", "lgbm_sat", "xg_sat")]
data_pub_sun["xg_boost"] <- mapply(precision, data_pub_sun$saturday, data_pub_sun$xg_sat)
data_pub_sun <- data_pub[c("publisher", "sunday", "lin_sun", "tree_sun", "lgbm_sun", "xg_sun")]
data_pub_sun["xg_boost"] <- mapply(precision, data_pub_sun$sunday, data_pub_sun$xg_sun)
data_pub_sun["tree"] <- mapply(precision, data_pub_sun$sunday, data_pub_sun$tree_sun)
data_pub_sun["linear"] <- mapply(precision, data_pub_sun$sunday, data_pub_sun$lin_sun)
data_pub_sun["light_gbm"] <- mapply(precision, data_pub_sun$sunday, data_pub_sun$lgbm_sun)
scatter_sunday <- melt(data_pub_sun[c("publisher", "linear", "tree", "light_gbm", "xg_boost")], id.vars = "publisher")
sunday_data <- merge(scatter_sunday, data_pub_sun[c("publisher", "sunday")], by="publisher")
g_scat_sun <- ggplot(data=sunday_data) + ylim(-210, 210)
g_scat_sun <- g_scat_sun + geom_point(aes(x=sunday_data$saturday, y=sunday_data$value, color=sunday_data$variable)) + labs(title="Sunday results", y="Deviation in percent", x="Billable Views") + scale_fill_discrete(name="Model type")
g_scat_sun
sunday_data
g_scat_sun <- ggplot(data=sunday_data) + ylim(-210, 210)
g_scat_sun <- g_scat_sun + geom_point(aes(x=sunday_data$sunday, y=sunday_data$value, color=sunday_data$variable)) + labs(title="Sunday results", y="Deviation in percent", x="Billable Views") + scale_fill_discrete(name="Model type")
g_scat_sun
g_scat_sat <- ggplot(data=saturday_data) + ylim(-110, 410)
g_scat_sat <- g_scat_sat + geom_point(aes(x=saturday_data$saturday, y=saturday_data$value, color=saturday_data$variable)) + labs(title="Saturday results", y="Deviation in percent", x="Billable Views") + scale_fill_discrete(name="Model type")
g_scat_sat
g_scat_sun <- ggplot(data=sunday_data) + ylim(-110, 410)
g_scat_sun <- g_scat_sun + geom_point(aes(x=sunday_data$sunday, y=sunday_data$value, color=sunday_data$variable)) + labs(title="Sunday results", y="Deviation in percent", x="Billable Views") + scale_fill_discrete(name="Model type")
g_scat_sun
top_10_sat$per_tree <- ((top_10_sat$tree- top_10_sat$turth)/top_10_sat$turth)*100
top_10_sat$per_linear <- ((top_10_sat$linear- top_10_sat$turth)/top_10_sat$turth)*100
top_10_sat$per_light_gbm <- ((top_10_sat$light_gbm- top_10_sat$turth)/top_10_sat$turth)*100
top_10_sat$per_xg_boost <- ((top_10_sat$xg_boost- top_10_sat$turth)/top_10_sat$turth)*100
top_10_sat
per_10_sat <- top_10_sat[c("publisher", "per_linear", "per_tree", "per_light_gbm","per_xg_boost")]
per_long_sat <- melt(per_10_sat, id.vars = "publisher")
g_sat <- ggplot(per_long_sat, aes(x=publisher, fill=variable, y=value)) + geom_bar(stat = "identity", position="dodge") + theme(axis.text.x=element_text(angle=90, hjust=1)) + labs(title="Saturday results", y="Deviation in percent") + scale_fill_discrete(name="Model type")
g_sat
top_10_sun$per_light <- ((top_10_sun$lgbm_sun - top_10_sun$sunday)/top_10_sun$sunday)*100
top_10_sun$per_linear <- ((top_10_sun$lin_sun - top_10_sun$sunday)/top_10_sun$sunday)*100
top_10_sun$per_tree <- ((top_10_sun$tree_sun - top_10_sun$sunday)/top_10_sun$sunday)*100
top_10_sun$per_boost <- ((top_10_sun$xg_sun - top_10_sun$sunday)/top_10_sun$sunday)*100
per_10_sun <- top_10_sun[c("publisher", "per_linear", "per_tree", "per_light", "per_boost")]
names(per_10_sun) <- c("publisher", "linear", "tree", "light_gbm", "xg_boost")
long_10_sun <- melt(per_10_sun, id.vars = "publisher")
g_sun <- ggplot(long_10_sun, aes(x=publisher, fill=variable, y=value)) + geom_bar(stat = "identity", position="dodge") + theme(axis.text.x=element_text(angle=90, hjust=1)) + labs(title="Sunday results", y="Deviation in percent") + scale_fill_discrete(name="Model type")
g_sun
g_scat_sat <- ggplot(data=saturday_data) + ylim(-210, 210)
g_scat_sat <- ggplot(data=saturday_data) + ylim(-110, 410)
g_scat_sat <- g_scat_sat + geom_point(aes(x=saturday_data$saturday, y=saturday_data$value, color=saturday_data$variable)) + labs(title="Saturday results", y="Deviation in percent", x="Billable Views") + scale_fill_discrete(name="Model type")
g_scat_sat
g_scat_sat <- g_scat_sat + scale_fill_discrete(name="Model type")
g_scat_sat
g_scat_sat <- g_scat_sat + scale_color_discrete(name="Model type")
g_scat_sat
g_scat_sat <- g_scat_sat + geom_abline(y=0)
g_scat_sat <- g_scat_sat + geom_abline(slope = 0)
g_scat_sat
g_scat_sat <- ggplot(data=saturday_data) + ylim(-110, 410)
g_scat_sat <- g_scat_sat + geom_point(aes(x=saturday_data$saturday, y=saturday_data$value, color=saturday_data$variable)) + labs(title="Saturday results", y="Deviation in percent", x="Billable Views") + scale_color_discrete(name="Model type") + geom_hline(yintercept = 0)
g_scat_sat
g_scat_sun <- ggplot(data=sunday_data) + ylim(-110, 410)
g_scat_sun <- g_scat_sun + geom_point(aes(x=sunday_data$sunday, y=sunday_data$value, color=sunday_data$variable)) + labs(title="Sunday results", y="Deviation in percent", x="Billable Views") + scale_color_discrete(name="Model type") + geom_hline(yintercept = 0)
g_scat_sun
setwd("~/Documents/GitHub/Practical_Machine_Learning_Assignment")
knitr::opts_chunk$set(echo = TRUE)
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv', 'train_set.csv')
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv', 'test_set.csv')
training <- read.csv('train_set.csv')
testing <- read.csv('test_set.csv')
dim(training)
apply(training, 1, is.na)
sum(apply(training, 1, is.na))
sum(is.na.data.frame(training))
is.na.data.frame(training)
sapply(training, 1, sum(is.na))
sapply(training,  sum(is.na))
sapply(training,  sum(is.na(x)))
sapply(training,  fun(x){sum(is.na(x))})
sapply(training,  fun(x)sum(is.na(x)))
sapply(training,  fun(x)=sum(is.na(x)))
sapply(training,  function(x) sum(is.na(x)))
sapply(training,  function(x) sum(is.na(x))) > 0
sapply(training,  function(x) sum(is.na(x)))
training[sapply(training,  function(x) sum(is.na(x))) != 19216,]
reduces <- training[sapply(training,  function(x) sum(is.na(x))) != 19216,]
reduces <- training[sapply(training,  function(x) sum(is.na(x))) != 19216]
reduced_training <- training[sapply(training,  function(x) sum(is.na(x))) != 19216]
summary(reduced_training)
summary(training)
library(dplyr)
summarise(training)
summarize(training)
training %>% summarise(mean, n, is.na)
training %>% summarise_all(mean, n, is.na)
training %>% summarise_all(mean, n)
training %>% summarise_all(funs=(mean, n))
training %>% summarise_all(funs=(mean))
training %>% summarise_all(.funs=(mean))
training %>% summarise_all(.funs=(mean), na.rm=TRUE)
library(Hmisc)
describe(training)
fivenum(training)
summary(training)
head(training)
names(training)
sapply(training[sapply(training,  function(x) sum(is.na(x))) > 0 ], function(c) sum(is.na(c))
)
summary(reduced_training)
library(ggplot2)
gg1 <- ggplot(data=reduced_training) + geom_point(aes(y=reduced_training$total_accel_arm, x=reduced_training$total_accel_belt, color=reduced_training$classe))
gg1
gg2 <- ggplot(data=reduced_training) + geom_point(aes(y=reduced_training$total_accel_dumbbell, x=reduced_training$total_accel_forearm, color=reduced_training$classe))
gg2
tapply(training$classe, training, summary)
training %>% group_by(classe) %>% summarise()
gg3 <- ggplot(data=reduced_training) + geom_point(aes(y=reduced_training$accel_belt_y, x=reduced_training$accel_belt_x, color=reduced_training$classe))
gg3
install.packages(plotly)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
library("plotly")
install.packages("plot3D")
library(plot3D)
scatter3D(x=training$accel_arm_x, y=training$accel_arm_y, z=training$accel_arm_z, col=training$classe)
scatter3D(x=training$accel_arm_x, y=training$accel_arm_y, z=training$accel_arm_z, col=training$classe, pch=1)
scatter3D(x=training$accel_arm_x, y=training$accel_arm_y, z=training$accel_arm_z, colvar = training$classe, pch=1)
scatter3D(x=training$accel_arm_x, y=training$accel_arm_y, z=training$accel_arm_z, colvar=training$class)
with(USArrests, scatter3D(Murder, Assault, Rape - 1,
colvar = UrbanPop, col = gg.col(100),
type = "h", pch = ".", add = TRUE))
with(USArrests, scatter3D(Murder, Assault, Rape - 1,
colvar = UrbanPop, col = gg.col(100),
type = "h", pch = ".", add = TRUE))
with(USArrests, scatter3D(Murder, Assault, Rape - 1,
colvar = UrbanPop, col = gg.col(100),
type = "h", pch = ".", add = TRUE))
scatter3D(x=training$accel_arm_x, y=training$accel_arm_y, z=training$accel_arm_z, colvar = training$classe, bty="b2")
scatter3D(x=training$accel_arm_x, y=training$accel_arm_y, z=training$accel_arm_z, colvar=training$classe, bty="g")
as.numeric(training$classe)
scatter3D(x=training$accel_arm_x, y=training$accel_arm_y, z=training$accel_arm_z, colvar=as.numeric()training$classe, bty="g")
scatter3D(x=training$accel_arm_x, y=training$accel_arm_y, z=training$accel_arm_z, colvar=as.numeric(training$classe), bty="g")
scatter3D(x=training$accel_belt_x, y=training$accel_belt_y, z=training$accel_belt_z, colvar=as.numeric(training$classe), bty="g")
scatter3D(x=training$accel_forearm_x, y=training$accel_forearm_y, z=training$accel_forearm_z, colvar=as.numeric(training$classe), bty="g")
scatter3D(x=training$accel_dumbbell_x, y=training$accel_dumbbell_y, z=training$accel_dumbbell_z, colvar=as.numeric(training$classe), bty="g")
aggregate(reduced_training, classe, mean)
aggregate(classe ~ accel_arm_x + accel_arm_y + accel_arm_z, data=reduced_training, mean)
aggregate(c(accel_arm_x + accel_arm_y + accel_arm_z) ~ classe, data=reduced_training, mean)
aggregate(accel_arm_x + accel_arm_y + accel_arm_z ~ classe, data=reduced_training, mean)
aggregate(accel_arm_x ~ classe, data=reduced_training, mean)
aggregate(accel_arm_y ~ classe, data=reduced_training, mean)
aggregate(accel_arm_z ~ classe, data=reduced_training, mean)
scatter3D(x=training$gyros_belt_x, y=training$gyros_belt_y, z=training$gyros_belt_z, colvar=as.numeric(training$classe), bty="g")
scatter3D(x=training$gyros_arm_x, y=training$gyros_arm_y, z=training$gyros_arm_z, colvar=as.numeric(training$classe), bty="g")
gg4 <- ggplot(data=reduced_training) + geom_boxplot()
library(ggplot2)
gg4 <- ggplot(data=reduced_training) + geom_density(aes(reduced_training$total_accel_arm, color=reduced_training$classe))
gg4
gg4 <- ggplot(data=reduced_training) + geom_boxplot(aes(reduced_training$total_accel_arm, color=reduced_training$classe))
gg4
gg4 <- ggplot(data=reduced_training) + geom_boxplot(aes(reduced_training$total_accel_arm, x=reduced_training$classe))
gg4
library(carrot)
install.packages("caret")
gg4 <- ggplot(data=reduced_training) + geom_boxplot(aes(reduced_training$total_accel_forearm, x=reduced_training$classe))
gg4
gg4 <- ggplot(data=reduced_training) + geom_boxplot(aes(reduced_training$total_accel_belt, x=reduced_training$classe))
gg4
gg4 <- ggplot(data=reduced_training) + geom_boxplot(aes(reduced_training$total_accel_dumbbell, x=reduced_training$classe))
gg4
M <- abs(cor(training[,-160]))
M <- abs(cor(reduced_training[,-93]))
small <- reduced_training[c("total_accelt_belt","total_accelt_arm", "total_accelt_forearm", "total_accelt_dumbbell", "classe" )]
small <- reduced_training[c("total_accelt_belt","total_accelt_arm", "total_accelt_forearm", "total_accelt_dumbbell", "classe" ),]
small <- reduced_training[,c("total_accelt_belt","total_accelt_arm", "total_accelt_forearm", "total_accelt_dumbbell", "classe" )]
small <- reduced_training[c("total_accel_belt","total_accel_arm", "total_accel_forearm", "total_accel_dumbbell", "classe" )]
M <- abs(cor(small[,-5]))
diag(M) <- 0
which(M > 0.75, arr.ind = T)
M
small <- reduced_training[c("gyros_belt_x","gyros_belt_y", "gyros_belt_z", "classe" )]
M <- abs(cor(small[,-4]))
M
small <- reduced_training[c("gyros_belt_x","accel_belt_x", "magnet_belt_x", "classe" )]
M <- abs(cor(small[,-4]))
M
small <- reduced_training[c("roll_belt","ptch_belt", "yaw_belt", "total_accel_belt", "classe" )]
small <- reduced_training[c("roll_belt","pitch_belt", "yaw_belt", "total_accel_belt", "classe" )]
M <- abs(cor(small[,-4]))
M <- abs(cor(small[,-5]))
M
is.numeric(training)
modfit <- train(classe~., data=training, method="rf", prox=TRUE)
library(caret)
modfit <- train(classe~., data=training, method="rf", prox=TRUE)
modfit
modfit <- train(classe~., data=reduced_training, method="rf", prox=TRUE)
sappl(training, is.numeric)
sapply(training, is.numeric)
reduced_training[-(1:5),]
test <- reduced_training[-(1:5),]
test <- reduced_training[,-(1:5)]
test <- reduced_training[,-(1:7)]
knitr::opts_chunk$set(echo = TRUE)
further_reduced_training <- reduced_training[, - (1:7)]
test2 <- further_reduced_training[sapply(further_reduced_training, is.numeric)]
final_training <- further_reduced_training[sapply(further_reduced_training, is.numeric)]
final_training$classe <- further_reduced_training$classe
final_training[grepl("belt", names(final_training)]
final_training[grepl("belt", names(final_training))
]
M <- abs(cor(final_training[grepl("belt", names(final_training))])
)
M
M <- abs(cor(final_training[grepl("forearm", names(final_training))])
))
M <- abs(cor(final_training[grepl("forearm", names(final_training))]))
M
M <- abs(cor(final_training[grepl("dumbbell", names(final_training))]))
M
M <- abs(cor(final_training[grepl("_arm", names(final_training))]))
M
train_control<- trainControl(method="cv", number=10, savePredictions = TRUE)
model <- train(classe~., data= final_training, trControl=train_control, method="rpart")
model
model <- train(classe~., data= final_training, trControl=train_control, method="gbm")
model
library(rattle)
fancyRpartPlot(model$finalModel)
modelTree <- train(classe~., data= final_training, trControl=train_control, method="rpart")
modelTree
fancyRpartPlot(modelTree$finalModel)
modelTree <- train(classe~., data= final_training, trControl=train_control, method="rpart")
fancyRpartPlot(modelTree$finalModel)
model$modelInfo
model$xlevels
gg5 <- ggplot(data=final_training) + geom_points(aes(y=final_training$roll_belt, x=final_training$classe))
gg5 <- ggplot(data=final_training) + geom_point(aes(y=final_training$roll_belt, x=final_training$classe))
gg5
gg_belt <- ggplot(final_training) + geom_point(aes(x=final_training$gyros_belt_x, y=final_training$gyros_belt_y, col=final_training$classe))
gg_belt
gg_belt <- ggplot(final_training) + geom_point(aes(x=final_training$magnet_belt_x, y=final_training$magnet_belt_y, col=final_training$classe))
gg_belt
scatter3D(x=final_training$magnet_belt_x, y=final_training$magnet_belt_y, z=final_training$magnet_belt_z, colvar = as.numeric(final_training$classe))
gg_belt <- ggplot(final_training) + geom_point(aes(x=final_training$magnet_belt_x, y=final_training$magnet_belt_y, col=final_training$classe))
gg_belt
preProcess(final_training[c("magnet_belt_x", "magnet_belt_y", "magnet_belt_z")], method="pca", pcaComp = 2)
preproc_belt <- preProcess(final_training[c("magnet_belt_x", "magnet_belt_y", "magnet_belt_z")], method="pca", pcaComp = 2)
new_pcas <- predict(preproc_belt, final_training[c("magnet_belt_x", "magnet_belt_y", "magnet_belt_z")])
ggplot(data=new_pcas) + geom_point(aes(x=new_pcas[,1], y=new_pcas[,2], col=final_training$classe))
preproc_belt <- preProcess(final_training[c("magnet_belt_x", "gyros_belt_x", "accel_belt_x")], method="pca", pcaComp = 2)
new_pcas <- predict(preproc_belt, final_training[c("magnet_belt_x", "gyros_belt_x", "accel_belt_x")])
ggplot(data=new_pcas) + geom_point(aes(x=new_pcas[,1], y=new_pcas[,2], col=final_training$classe))
M <- abs(cor(final_training[,-53]))
diag(M) <- 0
which(M>0.75)
which(M>0.75, arr.ind = TRUE)
corrMatrix <- which(M>0.75, arr.ind = TRUE)
names(corrMatrix)
corrMatrix[1,]
corrMatrix[,1] == 1
corrMatrix[,1] == 1 or corrMatrix[,2] == 1
corrMatrix[,1] == 1 || corrMatrix[,2] == 1
(corrMatrix[,1] == 1) || (corrMatrix[,2] == 1)
corrMatrix[(corrMatrix[,1] == 1) || (corrMatrix[,2] == 1),]
corrMatrix[(corrMatrix[,1] == 1 || corrMatrix[,2] == 1),]
corrMatrix[(corrMatrix[,1] == 1 | corrMatrix[,2] == 1),]
correlation1 <- corrMatrix[(corrMatrix[,1] == 1 | corrMatrix[,2] == 1),]
corrMatrix[(corrMatrix[,1] != 1 & corrMatrix[,2] != 1),]
corrMatrix <-  corrMatrix[(corrMatrix[,1] != 1 & corrMatrix[,2] != 1),]
corrMatrix
correlation4 <- corrMatrix[(corrMatrix[,1] == 4 | corrMatrix[,2] == 4),]
correlation4
corrMatrix <-  corrMatrix[(corrMatrix[,1] != 4 & corrMatrix[,2] != 4),]
corrMatrix
correlation10 <- corrMatrix[(corrMatrix[,1] == 10 | corrMatrix[,2] == 10),]
corrMatrix <-  corrMatrix[(corrMatrix[,1] != 10 & corrMatrix[,2] != 10),]
corrMatrix
correlation46 <- corrMatrix[(corrMatrix[,1] == 46 | corrMatrix[,2] == 46),]
corrMatrix <-  corrMatrix[(corrMatrix[,1] != 46 & corrMatrix[,2] != 46),]
corrMatrix
View(correlation1)
unique(correlation10[,1] )
final_training[unique(correlation10[,1])]
final_training[,unique(correlation10[,1])]
test <- final_training[,unique(correlation10[,1])]
trialPca <- preProcess(final_training[,unique(correlation10[,1])], method = "pca", pcaComp = 3)
trialPca <- preProcess(final_training, method = "pca", pcaComp = 2)
trialPca <- preProcess(final_training[,-53], method = "pca", pcaComp = 2)
testPC <- predict(trialPca, final_training[,-53])
ggplot() + geom_point(aes(testPC[,1], testPC[,2], col=final_training$classe))
trialPca <- preProcess(final_training[,-53], method = "pca", pcaComp = 20)
testPC <- predict(trialPca, final_training[,-53])
modelTree <- train(final_training$classe~., data= testPC, trControl=train_control, method="rpart")
train_control<- trainControl(method="cv", number=10, savePredictions = TRUE)
modelTree <- train(final_training$classe~., data= testPC, trControl=train_control, method="rpart")
par(mfrow(2,2))
par(mfrow=c(2,2))
boxplot(classe~roll_arm, data=final_training, col=1:5)
boxplot(roll_arm~classe, data=final_training, col=1:5)
boxplot(yaw_arm~classe, data=final_training, col=1:5)
boxplot(pitch_arm~classe, data=final_training, col=1:5)
boxplot(total_accel_arm~classe, data=final_training, col=1:5)
boxplot(roll_arm~classe, data=final_training, col=2:6)
boxplot(total_accel_arm~classe, data=final_training, col=2:6)
par(mfrow=c(2,2), oma=c(0,0,2,0))
boxplot(pitch_arm~classe, data=final_training, col=2:6, main="pitch")
boxplot(total_accel_arm~classe, data=final_training, col=2:6, main= "Total Accelreation")
boxplot(roll_arm~classe, data=final_training, col=2:6, main="Roll")
boxplot(yaw_arm~classe, data=final_training, col=2:6, main="YAW")
mtext("Arm Accelerator", outer=TRUE, cex = 1.5)
par(mfrow=c(2,2), oma=c(0,0,2,0))
boxplot(pitch_arm~classe, data=final_training, col=2:6, main="pitch")
boxplot(total_accel_arm~classe, data=final_training, col=2:6, main= "Total Accelreation")
boxplot(roll_arm~classe, data=final_training, col=2:6, main="Roll")
boxplot(yaw_arm~classe, data=final_training, col=2:6, main="YAW")
mtext("Arm Accelerator", outer=TRUE, cex = 1.5)
par(mfrow=c(2,2), oma=c(0,0,2,0))
boxplot(pitch_forearm~classe, data=final_training, col=2:6, main="pitch")
boxplot(total_accel_forearm~classe, data=final_training, col=2:6, main= "Total Accelreation")
boxplot(roll_forearm~classe, data=final_training, col=2:6, main="Roll")
boxplot(yaw_forearm~classe, data=final_training, col=2:6, main="YAW")
mtext("Forearm Accelerator", outer=TRUE, cex = 1.5)
par(mfrow=c(2,2), oma=c(0,0,2,0))
boxplot(pitch_belt~classe, data=final_training, col=2:6, main="pitch")
boxplot(total_accel_belt~classe, data=final_training, col=2:6, main= "Total Accelreation")
boxplot(roll_belt~classe, data=final_training, col=2:6, main="Roll")
boxplot(yaw_belt~classe, data=final_training, col=2:6, main="YAW")
mtext("Belt Accelerator", outer=TRUE, cex = 1.5)
par(mfrow=c(2,2), oma=c(0,0,2,0))
boxplot(pitch_dumbbell~classe, data=final_training, col=2:6, main="pitch")
boxplot(total_accel_dumbbell~classe, data=final_training, col=2:6, main= "Total Accelreation")
boxplot(roll_dumbbell~classe, data=final_training, col=2:6, main="Roll")
boxplot(yaw_dumbbell~classe, data=final_training, col=2:6, main="YAW")
mtext("Dumbbell Accelerator", outer=TRUE, cex = 1.5)
model <- train(final_training$classe~., data= testPC, trControl=train_control, method="gbm" )
model
modelRf <- train(final_training$classe~., data= testPC, trControl=train_control, method="rf" )
model <- train(final_training$classe~., data= testPC, trControl=train_control, method="gbm", verbose=FALSE )
final_testing <- testing[,names(final_training)]
final_testing <- testing[names(final_training)]
names(testing)
testing$problem_id
final_testing <- testing[names(final_training[,-53])]
predict(model, final_testing)
model$modelInfo
model
require(caret)
set.seed(322)
train_control<- trainControl(method="cv", number=10)
set.seed(322)
model <- train(classe~., data= final_training, trControl=train_control, method="gbm", verbose=FALSE)
train_control$
model
model
model$results$Accuracy
trial <- createFolds(training$classe, k=3, list=FALSE)
trial
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv', 'train_set.csv', quiet=TRUE)
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv', 'test_set.csv', quiet=TRUE)
training <- read.csv('train_set.csv')
testing <- read.csv('test_set.csv')
dim(training)
dim(testing)
names(training)
sapply(training[sapply(training,  function(x) sum(is.na(x))) > 0 ], function(c) sum(is.na(c)))
reduced_training <- training[sapply(training,  function(x) sum(is.na(x))) == 0 ]
further_reduced_training <- reduced_training[, - (1:7)]
final_training <- further_reduced_training[sapply(further_reduced_training, is.numeric)]
final_training$classe <- further_reduced_training$classe
par(mfrow=c(2,2), oma=c(0,0,2,0))
boxplot(pitch_arm~classe, data=final_training, col=2:6, main="pitch")
boxplot(total_accel_arm~classe, data=final_training, col=2:6, main= "Total Accelreation")
boxplot(roll_arm~classe, data=final_training, col=2:6, main="Roll")
boxplot(yaw_arm~classe, data=final_training, col=2:6, main="YAW")
mtext("Arm Accelerator", outer=TRUE, cex = 1.5)
par(mfrow=c(2,2), oma=c(0,0,2,0))
boxplot(pitch_forearm~classe, data=final_training, col=2:6, main="pitch")
boxplot(total_accel_forearm~classe, data=final_training, col=2:6, main= "Total Accelreation")
boxplot(roll_forearm~classe, data=final_training, col=2:6, main="Roll")
boxplot(yaw_forearm~classe, data=final_training, col=2:6, main="YAW")
mtext("Forearm Accelerator", outer=TRUE, cex = 1.5)
par(mfrow=c(2,2), oma=c(0,0,2,0))
boxplot(pitch_belt~classe, data=final_training, col=2:6, main="pitch")
boxplot(total_accel_belt~classe, data=final_training, col=2:6, main= "Total Accelreation")
boxplot(roll_belt~classe, data=final_training, col=2:6, main="Roll")
boxplot(yaw_belt~classe, data=final_training, col=2:6, main="YAW")
mtext("Belt Accelerator", outer=TRUE, cex = 1.5)
par(mfrow=c(2,2), oma=c(0,0,2,0))
boxplot(pitch_dumbbell~classe, data=final_training, col=2:6, main="pitch")
boxplot(total_accel_dumbbell~classe, data=final_training, col=2:6, main= "Total Accelreation")
boxplot(roll_dumbbell~classe, data=final_training, col=2:6, main="Roll")
boxplot(yaw_dumbbell~classe, data=final_training, col=2:6, main="YAW")
mtext("Dumbbell Accelerator", outer=TRUE, cex = 1.5)
require(caret)
set.seed(29102018)
final_training$fold <- createFolds(final_training$classe, k=3, list=FALSE)
final_training[final_training$fold != 1]
final_training[(final_training$fold != 1),]
final_training[(final_training$fold != 1),-c(53,54)]
set.seed(29102018)
tree1 <- train(classe~., data= final_training[(final_training$fold != 1),-54], method="rpart", verbose=FALSE)
set.seed(29102018)
tree1 <- train(classe~., data= final_training[(final_training$fold != 1),-54], method="rpart")
set.seed(29102018)
tree2 <- train(classe~., data= final_training[(final_training$fold != 2),-54], method="rpart")
set.seed(29102018)
tree3 <- train(classe~., data= final_training[(final_training$fold != 3),-54], method="rpart")
set.seed(29102018)
forest1 <- train(classe~., data= final_training[(final_training$fold != 1),-54], method="rf")
set.seed(29102018)
gbm1 <- train(classe~., data= final_training[(final_training$fold != 1),-54], method="gbm", verbose=FALSE)
